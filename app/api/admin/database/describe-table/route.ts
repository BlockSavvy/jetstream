import { NextResponse } from 'next/server';

// CORS headers
const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
  'Access-Control-Allow-Headers': 'Content-Type, Authorization',
};

interface ColumnInfo {
  name: string;
  type: string;
  primary_key?: boolean;
  foreign_key?: {
    table: string;
    column: string;
  } | null;
  nullable?: boolean;
  default_value?: string | null;
}

/**
 * Generates a human-readable description of a database table using AI
 */
export async function POST(request: Request) {
  try {
    // Parse request body
    const body = await request.json();
    const { tableName, columns } = body;
    
    if (!tableName || !columns) {
      return NextResponse.json(
        { error: 'Missing required parameters' },
        { status: 400, headers: corsHeaders }
      );
    }
    
    // Generate a description of the table structure
    const tableDescription = generateTableDescription(tableName, columns);
    
    // Call the AI model to create a human-readable description
    const description = await generateAIDescription(tableName, columns, tableDescription);
    
    return NextResponse.json({ description }, { headers: corsHeaders });
  } catch (error) {
    console.error('Error describing table:', error);
    return NextResponse.json(
      { error: 'Failed to generate table description' },
      { status: 500, headers: corsHeaders }
    );
  }
}

/**
 * Generates a structured description of a table and its columns
 */
function generateTableDescription(tableName: string, columns: ColumnInfo[]): string {
  // Generate a basic description of the table structure
  let description = `Table "${tableName}" has ${columns.length} columns:\n`;
  
  // Add details for each column
  columns.forEach((column) => {
    description += `- ${column.name} (${column.type})`;
    
    if (column.primary_key) {
      description += ' [PRIMARY KEY]';
    }
    
    if (column.foreign_key) {
      description += ` [FOREIGN KEY to ${column.foreign_key.table}.${column.foreign_key.column}]`;
    }
    
    if (column.nullable === false) {
      description += ' [NOT NULL]';
    }
    
    if (column.default_value) {
      description += ` [DEFAULT: ${column.default_value}]`;
    }
    
    description += '\n';
  });
  
  return description;
}

/**
 * Uses an AI model to generate a human-readable description of the table
 */
async function generateAIDescription(
  tableName: string,
  columns: ColumnInfo[],
  structuredDescription: string
): Promise<string> {
  try {
    // Get OpenAI API key from environment variables
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY is not set');
    }
    
    // Format the prompt for the AI
    const prompt = `Generate a concise explanation (1-2 sentences) of the purpose of this database table based on its name and structure:
    
Table name: ${tableName}
Structure:
${structuredDescription}

Explanation:`;
    
    // Call the OpenAI API
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`
      },
      body: JSON.stringify({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: 'You are a database expert analyzing the structure of tables. Provide brief, precise explanations of table purposes based on their name and column structure.'
          },
          {
            role: 'user',
            content: prompt
          }
        ],
        temperature: 0.3,
        max_tokens: 100
      })
    });
    
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.status} ${response.statusText}`);
    }
    
    const result = await response.json();
    
    if (result.choices && result.choices.length > 0) {
      // Extract the generated text
      const explanation = result.choices[0].message.content.trim();
      return explanation;
    } else {
      throw new Error('No response generated by AI');
    }
  } catch (error) {
    console.error('Error generating AI description:', error);
    // Return a fallback description
    return `The "${tableName}" table contains ${columns.length} columns and stores records related to ${tableName.replace(/_/g, ' ')}.`;
  }
}

export async function OPTIONS() {
  return NextResponse.json({}, { headers: corsHeaders });
} 