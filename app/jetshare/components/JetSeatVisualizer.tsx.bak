'use client';

import { useState, useEffect, forwardRef, useImperativeHandle, useRef, useCallback } from 'react';
import Selecto from 'react-selecto';
import { cn } from '@/lib/utils';
import { Slider } from '@/components/ui/slider';
import { Badge } from '@/components/ui/badge';

// Seat types and layout interfaces
export interface SeatLayout {
  rows: number;
  seatsPerRow: number;
  layoutType: 'standard' | 'luxury' | 'custom';
  totalSeats?: number;
  seatMap?: {
    skipPositions?: number[][];
    customPositions?: { row: number; col: number; id: string }[];
  };
}

export interface SeatConfiguration {
  jetId: string;
  selectedSeats: string[];
  totalSeats: number;
  totalSelected: number;
  selectionPercentage: number;
}

// Props interface
export interface JetSeatVisualizerProps {
  jetId: string;
  defaultLayout?: SeatLayout;
  onChange?: (config: SeatConfiguration) => void;
  initialSelection?: SeatConfiguration;
  readOnly?: boolean;
  className?: string;
  showControls?: boolean;
  totalSeats?: number;
}

// Export the component ref type for external usage
export type JetSeatVisualizerRef = {
  openVisualizer: () => void;
  closeVisualizer: () => void;
  getLayoutInfo: () => {
    totalSeats: number;
    rows: number;
    seatsPerRow: number;
    layoutType: string;
    jetId: string;
  };
  selectSeats: (seatIds: string[]) => void;
  clearSelection: () => void;
};

// Helper function to generate seat IDs
const generateSeatId = (row: number, col: number) => {
  const rowLetter = String.fromCharCode(65 + row); // A, B, C, etc.
  return `${rowLetter}${col + 1}`;
};

// Add a status message component
const StatusMessage = ({ isLoading, error, onRetry }: { isLoading: boolean; error: string | null; onRetry?: () => void }) => {
  if (isLoading) {
    return (
      <div className="flex flex-col items-center justify-center w-full h-32">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-700 mb-2"></div>
        <p className="text-sm text-gray-500 dark:text-gray-400">Loading jet configuration...</p>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="text-red-500 dark:text-red-400 text-center p-4">
        <p className="mb-2">{error}</p>
        {onRetry && (
          <button
            className="px-3 py-1 text-sm bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200 rounded-md"
            onClick={onRetry}
          >
            Try Again
          </button>
        )}
      </div>
    );
  }
  
  return null;
};

// Add a seat selection summary component
const SeatSelectionSummary = ({ 
  selectedSeats,
  totalSeats,
}: { 
  selectedSeats: string[];
  totalSeats: number;
}) => {
  const selectionPercentage = totalSeats > 0 ? Math.round((selectedSeats.length / totalSeats) * 100) : 0;
  
  return (
    <div className="bg-gray-50 dark:bg-gray-800 rounded-md p-3 mb-4 text-sm">
      <div className="flex justify-between items-center mb-2">
        <span className="font-medium">Seat Selection Summary</span>
        <span className="bg-blue-50 dark:bg-blue-900/30 px-2 py-1 rounded-md text-xs">
          Total Seats: {totalSeats}
        </span>
      </div>
      
      <div className="grid grid-cols-2 gap-2">
        <div className="bg-blue-50 dark:bg-blue-900/20 rounded p-2">
          <span className="text-xs font-medium block mb-1">Selected Seats</span>
          <span className="text-lg font-bold">{selectedSeats.length} seats</span>
          <span className="text-xs text-gray-500 block">{selectionPercentage}%</span>
        </div>
        
        <div className="bg-amber-50 dark:bg-amber-900/20 rounded p-2">
          <span className="text-xs font-medium block mb-1">Remaining Seats</span>
          <span className="text-lg font-bold">{totalSeats - selectedSeats.length} seats</span>
          <span className="text-xs text-gray-500 block">{100 - selectionPercentage}%</span>
        </div>
      </div>
      
      {selectedSeats.length > 0 && (
        <div className="mt-2 flex flex-wrap gap-1 max-h-16 overflow-y-auto">
          {selectedSeats.map(seat => (
            <Badge key={seat} variant="outline" className="bg-blue-100 dark:bg-blue-900/50 text-xs">
              {seat}
            </Badge>
          ))}
        </div>
      )}
    </div>
  );
};

// Main component implementation
const JetSeatVisualizer = forwardRef<JetSeatVisualizerRef, JetSeatVisualizerProps>(
  ({ 
    jetId, 
    defaultLayout, 
    onChange, 
    initialSelection, 
    readOnly = false, 
    className,
    showControls = true,
    totalSeats
  }, ref) => {
    // Default layout if none provided
    const [layout, setLayout] = useState<SeatLayout>(
      defaultLayout || { rows: 6, seatsPerRow: 4, layoutType: 'standard' }
    );

    // State for loading layout data
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // State for visibility
    const [isVisible, setIsVisible] = useState(true);

    // State for seat selection
    const [selectedSeats, setSelectedSeats] = useState<string[]>(
      initialSelection?.selectedSeats || []
    );

    // Selection mode - default (tap) or drag
    const [selectionMode, setSelectionMode] = useState<'tap' | 'drag'>('tap');

    // State for grid calculations
    const [gridDimensions, setGridDimensions] = useState({ width: 0, height: 0 });
    const [seatSize, setSeatSize] = useState(0);

    // Flag for preventing update loops
    const isUpdatingRef = useRef(false);

    // Refs for seats
    const seatsRef = useRef<HTMLDivElement[]>([]);
    const selectoRef = useRef<Selecto>(null);
    const containerRef = useRef<HTMLDivElement>(null);

    // Add state to track seats that should be skipped (not displayed)
    const [skipPositions, setSkipPositions] = useState<number[][]>([]);

    // Calculate seat allocation
    const calculateSeatConfiguration = useCallback((): SeatConfiguration => {
      const actualTotalSeats = layout.totalSeats || (layout.rows * layout.seatsPerRow - skipPositions.length);
      const selectionPercentage = actualTotalSeats > 0 ? (selectedSeats.length / actualTotalSeats) * 100 : 0;
      
      return {
        jetId,
        selectedSeats,
        totalSeats: actualTotalSeats,
        totalSelected: selectedSeats.length,
        selectionPercentage
      };
    }, [jetId, layout, selectedSeats, skipPositions]);

    // Function to check if a position should be skipped
    const isSkippedPosition = useCallback((row: number, col: number): boolean => {
      return skipPositions.some(pos => pos[0] === row && pos[1] === col);
    }, [skipPositions]);

    // Update parent component with selection changes
    const updateParentComponent = useCallback(() => {
      if (!onChange || isUpdatingRef.current) return;
      
      // Call the onChange callback with the current configuration
      onChange(calculateSeatConfiguration());
    }, [onChange, calculateSeatConfiguration]);

    // Expose methods via ref
    useImperativeHandle(ref, () => ({
      openVisualizer: () => setIsVisible(true),
      closeVisualizer: () => setIsVisible(false),
      getLayoutInfo: () => {
        const totalSeats = layout.totalSeats || (layout.rows * layout.seatsPerRow - skipPositions.length);
        return {
          totalSeats,
          rows: layout.rows,
          seatsPerRow: layout.seatsPerRow,
          layoutType: layout.layoutType,
          jetId: jetId
        };
      },
      selectSeats: (seatIds: string[]) => {
        setSelectedSeats(seatIds);
      },
      clearSelection: () => {
        setSelectedSeats([]);
      }
    }));

    // Add debug logging
    const debugLog = (message: string, data?: any) => {
      if (process.env.NODE_ENV === 'development') {
        console.log(`[JetSeatVisualizer] ${message}`, data || '');
      }
    };

    // Handle seat click
    const handleSeatClick = useCallback((seatId: string) => {
      if (readOnly || selectionMode !== 'tap') return;
      
      setSelectedSeats(prev => {
        const isSelected = prev.includes(seatId);
        return isSelected 
          ? prev.filter(id => id !== seatId) // Remove if already selected
          : [...prev, seatId]; // Add if not selected
      });
    }, [readOnly, selectionMode]);

    // Handle select all
    const handleSelectAll = () => {
      if (readOnly) return;
      
      // Generate all valid seat IDs (excluding skipped positions)
      const allSeatIds: string[] = [];
      
      for (let row = 0; row < layout.rows; row++) {
        for (let col = 0; col < layout.seatsPerRow; col++) {
          if (!isSkippedPosition(row, col)) {
            allSeatIds.push(generateSeatId(row, col));
          }
        }
      }
      
      setSelectedSeats(allSeatIds);
    };

    // Handle clear selection
    const handleClearSelection = () => {
      if (readOnly) return;
      setSelectedSeats([]);
    };

    // Toggle selection mode
    const toggleSelectionMode = () => {
      if (readOnly) return;
      setSelectionMode(prev => prev === 'tap' ? 'drag' : 'tap');
    };

    // Handle selecto selection
    const handleSelectoSelect = useCallback((e: { selected: (HTMLElement | SVGElement)[] }) => {
      if (readOnly || selectionMode !== 'drag') return;
      
      // Get selected elements
      const selectedElements = e.selected;
      
      // Extract seat IDs from selected elements
      const newSelectedSeats = selectedElements.map((el) => 
        el instanceof HTMLElement ? el.getAttribute('data-seat-id') : null
      ).filter((id: string | null): id is string => id !== null);
      
      // Update selected seats
      setSelectedSeats(prev => {
        // For toggle behavior: Remove seats that were already selected
        const uniqueNewSeats = newSelectedSeats.filter(id => !prev.includes(id));
        return [...prev, ...uniqueNewSeats];
      });
    }, [readOnly, selectionMode]);

    // Fetch layout data when jetId changes
    useEffect(() => {
      const fetchLayoutData = async () => {
        if (!jetId) return;

        debugLog(`Fetching layout for jet ID: ${jetId}`);
        setIsLoading(true);
        setError(null);

        try {
          // Call API to get jet layout data
          const response = await fetch(`/api/jets/${jetId}`);
          
          if (!response.ok) {
            throw new Error('Failed to fetch jet layout data');
          }
          
          const data = await response.json();
          debugLog('Received jet layout data:', data);
          
          if (data.seatLayout) {
            setLayout(data.seatLayout);
            debugLog('Applied layout:', data.seatLayout);
            
            // Save skip positions if available
            if (data.seatLayout.seatMap?.skipPositions) {
              setSkipPositions(data.seatLayout.seatMap.skipPositions);
              debugLog('Applied skip positions:', data.seatLayout.seatMap.skipPositions);
            } else {
              setSkipPositions([]);
            }
          }
        } catch (err) {
          console.error('Error fetching jet layout:', err);
          setError('Failed to load jet configuration');
          // Keep using the default layout
        } finally {
          setIsLoading(false);
        }
      };

      fetchLayoutData();
      
      // Expose fetchLayoutData for retrying
      (window as any).fetchLayoutData = fetchLayoutData;
      
      return () => {
        // Cleanup
        delete (window as any).fetchLayoutData;
      };
    }, [jetId]);

    // Update dimensions when layout changes or component mounts
    useEffect(() => {
      // Set grid dimensions based on the number of rows/columns
      // These are base values that will be scaled by the container
      const baseGridWidth = layout.seatsPerRow * 50; // 50px per seat for better touch targets
      const baseGridHeight = layout.rows * 50; // 50px per seat
      
      setGridDimensions({
        width: baseGridWidth,
        height: baseGridHeight,
      });
      
      // Calculate seat size
      setSeatSize(50);
    }, [layout]);

    // Initialize with initial selection if provided
    useEffect(() => {
      if (!initialSelection || isUpdatingRef.current) return;
      
      isUpdatingRef.current = true;
      
      setSelectedSeats(initialSelection.selectedSeats || []);
      
      setTimeout(() => {
        isUpdatingRef.current = false;
      }, 50);
    }, [initialSelection]);

    // Update when selection changes
    useEffect(() => {
      if (isUpdatingRef.current) return;
      
      // Use setTimeout to debounce updates and break potential update cycles
      const timer = setTimeout(() => {
        updateParentComponent();
      }, 100); // Add a small debounce delay
      
      return () => clearTimeout(timer);
    }, [selectedSeats, updateParentComponent]);

    // Update total seats from props if provided
    useEffect(() => {
      if (totalSeats && totalSeats > 0) {
        // Calculate rows and columns based on total seats
        // For simplicity, we'll make a grid with approximately square dimensions
        const approxDimension = Math.ceil(Math.sqrt(totalSeats));
        
        setLayout(prev => ({
          ...prev,
          rows: Math.ceil(totalSeats / approxDimension),
          seatsPerRow: Math.min(approxDimension, totalSeats)
        }));
      }
    }, [totalSeats]);

    if (!isVisible) return null;

    return (
      <div className={cn("flex flex-col items-center p-4 bg-white dark:bg-gray-900 rounded-lg shadow-md", className)}>
        {showControls && (
          <div className="w-full text-center mb-4">
            <h3 className="text-lg font-semibold">Seat Selection</h3>
            
            <div className="flex justify-center items-center gap-4 mt-2">
              <button
                type="button"
                className={cn(
                  "px-3 py-1 rounded-md text-sm flex items-center",
                  selectionMode === 'tap'
                    ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 font-medium"
                    : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
                )}
                onClick={toggleSelectionMode}
                disabled={readOnly}
                aria-label="Tap selection mode"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M8 2a.5.5 0 0 1 .5.5v5h5a.5.5 0 0 1 0 1h-5v5a.5.5 0 0 1-1 0v-5h-5a.5.5 0 0 1 0-1h5v-5A.5.5 0 0 1 8 2Z"/>
                </svg>
                Tap Mode
              </button>
              <button
                type="button"
                className={cn(
                  "px-3 py-1 rounded-md text-sm flex items-center",
                  selectionMode === 'drag'
                    ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200 font-medium"
                    : "bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200"
                )}
                onClick={toggleSelectionMode}
                disabled={readOnly}
                aria-label="Drag selection mode"
              >
                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4 mr-1" viewBox="0 0 20 20" fill="currentColor">
                  <path d="M7 2a1 1 0 00-.707 1.707L7 4.414v3.758a1 1 0 01-.293.707l-4 4C.817 14.769 2.156 18 4.828 18h10.343c2.673 0 4.012-3.231 2.122-5.121l-4-4A1 1 0 0113 8.172V4.414l.707-.707A1 1 0 0013 2H7z" />
                </svg>
                Drag Mode
              </button>
            </div>
            
            <div className="flex justify-center items-center gap-4 mt-2">
              <button
                type="button"
                className="px-3 py-1 rounded-md text-sm bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                onClick={handleSelectAll}
                disabled={readOnly}
                aria-label="Select all seats"
              >
                Select All
              </button>
              <button
                type="button"
                className="px-3 py-1 rounded-md text-sm bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                onClick={handleClearSelection}
                disabled={readOnly}
                aria-label="Clear selection"
              >
                Clear
              </button>
            </div>

            {/* Show seat selection summary */}
            {!isLoading && !error && (
              <SeatSelectionSummary 
                selectedSeats={selectedSeats}
                totalSeats={layout.totalSeats || (layout.rows * layout.seatsPerRow - skipPositions.length)}
              />
            )}
          </div>
        )}

        <StatusMessage 
          isLoading={isLoading} 
          error={error} 
          onRetry={() => {
            setIsLoading(true);
            setError(null);
            // Use the function from the current effect scope
            const fetchJetData = async () => {
              if (!jetId) return;
              try {
                const response = await fetch(`/api/jets/${jetId}`);
                if (!response.ok) throw new Error('Failed to fetch jet layout data');
                const data = await response.json();
                if (data.seatLayout) {
                  setLayout(data.seatLayout);
                  if (data.seatLayout.seatMap?.skipPositions) {
                    setSkipPositions(data.seatLayout.seatMap.skipPositions);
                  } else {
                    setSkipPositions([]);
                  }
                }
              } catch (err) {
                console.error('Error fetching jet layout:', err);
                setError('Failed to load jet configuration');
              } finally {
                setIsLoading(false);
              }
            };
            fetchJetData();
          }} 
        />

        {!isLoading && !error && (
          <div 
            ref={containerRef}
            className="relative border-2 border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden touch-manipulation"
            style={{ 
              width: `${gridDimensions.width}px`, 
              height: `${gridDimensions.height}px`,
              maxWidth: '100%',
              maxHeight: '60vh'
            }}
            aria-label="Jet seat map"
          >
            {/* Show jet model and configuration info */}
            <div className="absolute top-2 left-2 right-2 z-10 flex justify-between items-center">
              <div className="bg-white/80 dark:bg-black/50 backdrop-blur-sm text-xs px-2 py-1 rounded">
                {layout.layoutType === 'luxury' ? 'Luxury Layout' : 'Standard Layout'}
              </div>
              <div className="bg-white/80 dark:bg-black/50 backdrop-blur-sm text-xs px-2 py-1 rounded">
                {layout.rows} rows × {layout.seatsPerRow} seats
              </div>
            </div>

            {/* Seats grid with improved styling */}
            <div className="absolute top-0 left-0 w-full h-full grid" 
              style={{ 
                gridTemplateColumns: `repeat(${layout.seatsPerRow}, 1fr)`,
                gridTemplateRows: `repeat(${layout.rows}, 1fr)` 
              }}
            >
              {Array.from({ length: layout.rows }).map((_, rowIdx) =>
                Array.from({ length: layout.seatsPerRow }).map((_, colIdx) => {
                  // Skip rendering this seat if it's in skipPositions
                  if (isSkippedPosition(rowIdx, colIdx)) {
                    return <div key={`empty-${rowIdx}-${colIdx}`} className="m-1"></div>;
                  }
                  
                  const seatId = generateSeatId(rowIdx, colIdx);
                  const isSelected = selectedSeats.includes(seatId);
                  
                  // Improved seat styling with touch-friendly size
                  return (
                    <div
                      key={`seat-${rowIdx}-${colIdx}`}
                      ref={(el) => {
                        if (el) seatsRef.current[rowIdx * layout.seatsPerRow + colIdx] = el;
                      }}
                      data-seat-id={seatId}
                      className={cn(
                        "m-1 flex items-center justify-center rounded-lg transition-colors duration-200 cursor-pointer touch-manipulation",
                        isSelected 
                          ? "bg-blue-500 text-white border border-blue-600 dark:bg-blue-600 dark:text-blue-50 dark:border-blue-700"
                          : "bg-gray-100 text-gray-900 border border-gray-300 dark:bg-gray-800 dark:text-gray-100 dark:border-gray-700 hover:bg-gray-200 dark:hover:bg-gray-700",
                        layout.layoutType === 'luxury' ? "shadow-sm" : "",
                        readOnly ? "pointer-events-none" : ""
                      )}
                      onClick={() => handleSeatClick(seatId)}
                      style={{ minWidth: '40px', minHeight: '40px' }} // Ensure good touch target size
                      role="checkbox"
                      aria-checked={isSelected}
                      aria-label={`Seat ${seatId}`}
                    >
                      <span className={cn(
                        "font-medium",
                        layout.layoutType === 'luxury' ? "text-sm" : "text-xs"
                      )}>{seatId}</span>
                    </div>
                  );
                })
              )}
            </div>

            {/* Selecto component for drag selection */}
            {!readOnly && selectionMode === 'drag' && (
              <Selecto
                ref={selectoRef}
                container={containerRef.current}
                selectableTargets={['[data-seat-id]']}
                selectByClick={false}
                selectFromInside={false}
                toggleContinueSelect={['shift']}
                hitRate={0}
                onSelect={handleSelectoSelect}
                ratio={0}
              />
            )}
          </div>
        )}

        {showControls && (
          <div className="mt-4 w-full flex justify-between">
            <button
              type="button"
              className="px-4 py-2 text-sm text-gray-700 bg-gray-100 rounded-md dark:bg-gray-800 dark:text-gray-300"
              onClick={() => setIsVisible(false)}
            >
              Close
            </button>
            <div className="text-sm text-gray-600 dark:text-gray-400">
              {selectionMode === 'tap' 
                ? 'Tap on seats to select/deselect' 
                : 'Drag to select multiple seats'}
            </div>
          </div>
        )}
      </div>
    );
  }
);

JetSeatVisualizer.displayName = 'JetSeatVisualizer';

export default JetSeatVisualizer; 
export default JetSeatVisualizer; 